local servoOrder = {}

for i=1,8 do
  servoOrder[model.getOutput(i-1).name] = "ch" .. i
end
servoOrder.AilR = servoOrder.AilR or servoOrder.FlpR or servoOrder.FlapR or servoOrder.FlapeR --right aileron, used as flaperon or for crow
servoOrder.AilL = servoOrder.AilL or servoOrder.FlpL or servoOrder.FlapL or servoOrder.FlapeL or servoOrder.AilR --right aileron, used as flaperon or for crow

servoOrder.FlpR  = servoOrder.FlpR or servoOrder.FlapR or servoOrder.FlapeR or servoOrder.Aux or servoOrder.AilR   --right  flap, used as flaperon and brakes in combination with crow
servoOrder.FlpL  = servoOrder.FlpL or servoOrder.FlapL or servoOrder.FlapeL or servoOrder.Aux or servoOrder.AilL   --right  flap, used as flaperon and brakes in combination with crow

servoOrder.Elev = servoOrder.Elev or servoOrder.Elevat               --elevator
servoOrder.Rudd = servoOrder.Rudd or servoOrder.Rudder                --rudder
servoOrder.VtR    = servoOrder.VtR or servoOrder.Elev     --right V-Tail
servoOrder.VtL    = servoOrder.VtL or servoOrder.Rudd     --right V-Tail
servoOrder.Mot    = servoOrder.Throt

local staticMemory=loadfile("/APPS/L/M/staticMemory.lua")

local throws = {}
throws.elevator = staticMemory(1,1,nil,"geom")/10
throws.rudder =staticMemory(1,4,nil,"geom")/10
throws.flaps = -staticMemory(1,2,nil,"geom")/10
throws.ailerons = staticMemory(1,3,nil,"geom")/10

if servoOrder.FlpR~=servoOrder.FlpL then
  throws.flaps = (throws.ailerons + throws.flaps)/2
  throws.ailerons = throws.flaps
end



return {servoOrder = servoOrder,throws = throws, unit = "mm"}